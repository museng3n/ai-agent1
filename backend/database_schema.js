// database-schema.js
// MongoDB Schema definitions for the CREATE AI system

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

/**
 * User Framework Schema
 * Stores the user's custom CREATE framework implementation
 */
const UserFrameworkSchema = new Schema({
    userId: {
        type: String,
        required: true,
        unique: true,
        index: true
    },
    contactId: {
        type: String,
        required: true,
        index: true
    },
    // Business information
    businessName: {
        type: String,
        required: true
    },
    businessDescription: {
        type: String,
        required: true
    },
    targetAudience: {
        type: String,
        required: true
    },
    brandVoice: {
        type: String,
        required: true
    },
    // Framework elements
    framework: {
        connect: {
            type: [String],
            default: []
        },
        revolutionize: {
            type: [String],
            default: []
        },
        engage: {
            type: [String],
            default: []
        },
        analyze: {
            type: [String],
            default: []
        },
        target: {
            type: [String],
            default: []
        },
        expand: {
            type: [String],
            default: []
        }
    },
    // Tracking framework completion
    completedElements: {
        type: [String],
        default: []
    },
    isComplete: {
        type: Boolean,
        default: false
    },
    // Metadata
    createdAt: {
        type: Date,
        default: Date.now
    },
    updatedAt: {
        type: Date,
        default: Date.now
    }
}, { timestamps: true });

/**
 * Generated Content Schema
 * Stores content generated by the AI
 */
const GeneratedContentSchema = new Schema({
    userId: {
        type: String,
        required: true,
        index: true
    },
    contactId: {
        type: String,
        required: true,
        index: true
    },
    // Content metadata
    frameworkElement: {
        type: String,
        required: true,
        enum: ['Connect', 'Revolutionize', 'Engage', 'Analyze', 'Target', 'Expand']
    },
    contentType: {
        type: String,
        required: true
    },
    platform: {
        type: String,
        required: true
    },
    contentTopic: {
        type: String,
        required: true
    },
    goal: {
        type: String
    },
    // The actual generated content
    content: {
        type: String,
        required: true
    },
    // Additional metadata
    isPinned: {
        type: Boolean,
        default: false
    },
    isSaved: {
        type: Boolean,
        default: true
    },
    // Schedule info (if applicable)
    scheduledFor: {
        type: Date
    },
    isScheduled: {
        type: Boolean,
        default: false
    },
    // Timestamps
    createdAt: {
        type: Date,
        default: Date.now
    }
}, { timestamps: true });

/**
 * Usage Stats Schema
 * Tracks user usage of the AI system
 */
const UsageStatsSchema = new Schema({
    userId: {
        type: String,
        required: true,
        unique: true,
        index: true
    },
    contactId: {
        type: String,
        required: true,
        index: true
    },
    // Current period usage
    currentPeriod: {
        month: Number,
        year: Number,
        generationsUsed: {
            type: Number,
            default: 0
        },
        generationsLimit: {
            type: Number,
            default: 100
        }
    },
    // Historical usage by period
    history: [{
        month: Number,
        year: Number,
        generationsUsed: Number
    }],
    // Usage by framework element
    elementUsage: {
        connect: {
            type: Number,
            default: 0
        },
        revolutionize: {
            type: Number,
            default: 0
        },
        engage: {
            type: Number,
            default: 0
        },
        analyze: {
            type: Number,
            default: 0
        },
        target: {
            type: Number,
            default: 0
        },
        expand: {
            type: Number,
            default: 0
        }
    },
    // Usage by platform
    platformUsage: {
        instagram: {
            type: Number,
            default: 0
        },
        tiktok: {
            type: Number,
            default: 0
        },
        facebook: {
            type: Number,
            default: 0
        },
        linkedin: {
            type: Number,
            default: 0
        },
        twitter: {
            type: Number,
            default: 0
        },
        email: {
            type: Number,
            default: 0
        },
        blog: {
            type: Number,
            default: 0
        }
    },
    // Account status
    accountStatus: {
        type: String,
        enum: ['active', 'suspended', 'cancelled'],
        default: 'active'
    },
    // Metadata
    lastGeneratedAt: {
        type: Date
    },
    createdAt: {
        type: Date,
        default: Date.now
    },
    updatedAt: {
        type: Date,
        default: Date.now
    }
}, { timestamps: true });

// Create and export the models
const UserFramework = mongoose.model('UserFramework', UserFrameworkSchema);
const GeneratedContent = mongoose.model('GeneratedContent', GeneratedContentSchema);
const UsageStats = mongoose.model('UsageStats', UsageStatsSchema);

module.exports = {
    UserFramework,
    GeneratedContent,
    UsageStats
};